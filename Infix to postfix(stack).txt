#include <stdio.h>
#include <limits.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <ctype.h>
#define SIZE 100
enum op {others, plusMinus, productDiv, expo};
struct Stack
{
 int stackTop;
 char arr[100];
};
int value(char c)
{
 if(c=='^')
 return expo;
 else if((c=='*')||(c=='/'))
 return productDiv;
 else if((c=='+')||(c=='-'))
 return plusMinus;
 else
 return others;
}
bool isFull(struct Stack *stackObj)
{
 return stackObj->stackTop==(SIZE-1);
}
bool isEmpty(struct Stack *stackObj)
{
 return stackObj->stackTop==(-1);
}
void push(struct Stack *stackObj, char data)
{
 if(isFull(stackObj))
 {
 printf("Stack is full!");
 return;
 }
 stackObj->stackTop++;
 stackObj->arr[stackObj->stackTop] = data;
}
char stackTopShow(struct Stack *stackObj)
{
 return stackObj->arr[stackObj->stackTop];
}
void print(struct Stack *stackObj)
{
 printf("The elements of the stack are: ");
 for(int i=0; i<(stackObj->stackTop); i++)
 {
 printf(" %c ", stackObj->arr[i]);
 }
}
void pop(struct Stack *stackObj)
{
 if(isEmpty(stackObj))
 {
 printf("Stack is empty");
 return;
 }
 //printf("Element %d is popped", stackObj->arr[stackObj->stackTop]);
 stackObj->stackTop--;
}
void convert(char infix[])
{
 struct Stack* s = (struct Stack*)malloc(sizeof(struct Stack));
 s->stackTop = -1;
 char postfix[100];
 int j = -1;
 for(int i=0; i<strlen(infix); i++)
 {
 if(isalpha(infix[i])||isdigit(infix[i]))
 {
 postfix[++j] = infix[i];
 }
 
 else if(infix[i]=='(')
 {
 push(s, infix[i]);
 }
 
 else if(infix[i]==')')
 {
 while(stackTopShow(s)!='(')
 {
 postfix[++j] = stackTopShow(s);
 pop(s);
 }
 pop(s);
 }
 
 else 
 {
 while((!isEmpty(s))&&(value(stackTopShow(s))>value(infix[i])))
 {
 postfix[++j] = stackTopShow(s);
 pop(s);
 }
 push(s, infix[i]);
 }
 }
 
 while(!isEmpty(s))
 {
 postfix[++j] = stackTopShow(s);
 pop(s);
 }
 
 printf("Postfix expression: %s", postfix);
}
int main()
{
 char infix[100];
 printf("Enter the infix expression: ");
 scanf("%s", infix);
 convert(infix);
}
